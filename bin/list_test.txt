module name: Example
Namespace: print_ns 1st arg
  Type symbols
    ('a_1) array
    ('a) bag
     bool
     bytes
     char
     exn
     float
    ('a, 'b, 'c_2) format [=('a, 'b, 'c_2, 'c_2, 'c_2, 'c_2) format6]
    ('a, 'b, 'c_2, 'd) format4 [=('a, 'b, 'c_2, 'c_2, 'c_2, 'd) format6]
    ('a, 'b, 'c_2, 'd, 'e, 'f) format6_1 [=('a, 'b, 'c_2, 'd, 'e, 'f) 
    format6]
     fpclass
     in_channel
     int
     int32
     int64
     integer
    ('a_2) lazy
    ('a_3) list
     nativeint
     oooo [=int list]
     open_flag
    ('a_4) option
     out_channel
    ('a) ref
    ('a, 'b) result
    ('a) seq
    ('a) set
     string
     unit
    
  Logic Symbols
    function Error (_:'b) : ('a, 'b) result
    function FP_infinite  : fpclass
    function FP_nan  : fpclass
    function FP_normal  : fpclass
    function FP_subnormal  : fpclass
    function FP_zero  : fpclass
    function None  : 'a_4 option
    function Ok (_:'a) : ('a, 'b) result
    function Open_append  : open_flag
    function Open_binary  : open_flag
    function Open_creat  : open_flag
    function Open_excl  : open_flag
    function Open_nonblock  : open_flag
    function Open_rdonly  : open_flag
    function Open_text  : open_flag
    function Open_trunc  : open_flag
    function Open_wronly  : open_flag
    function Some (_:'a_4) : 'a_4 option
    function []  : 'a_3 list
    function __FILE__  : string
    function __FUNCTION__  : string
    function __LINE__  : int
    function __LOC__  : string
    function __MODULE__  : string
    function __POS__  : string * int * int * int
    function abs (_:integer) : integer
    function constr#ref (_:'a) : 'a ref_1
    function epsilon_float  : float
    function fst (_:'a * 'b) : 'a
    function infinity  : float
    function infix * (_:integer) (_:integer) : integer
    function infix + (_:integer) (_:integer) : integer
    function infix ++ (_:'a seq) (_:'a seq) : 'a seq
    function infix - (_:integer) (_:integer) : integer
    function infix / (_:integer) (_:integer) : integer
    function infix :: (_:'a_3) (_:'a_3 list) : 'a_3 list
    predicate infix < (_:integer) (_:integer)
    predicate infix <= (_:integer) (_:integer)
    predicate infix = (_:'a_5) (_:'a_5)
    predicate infix > (_:integer) (_:integer)
    predicate infix >= (_:integer) (_:integer)
    function integer_of_int (_:int) : integer
    function logand (_:integer) (_:integer) : integer
    function lognot (_:integer) : integer
    function logor (_:integer) (_:integer) : integer
    function logxor (_:integer) (_:integer) : integer
    function max (_:integer) (_:integer) : integer
    function max_float  : float
    function max_int  : integer
    function min (_:integer) (_:integer) : integer
    function min_float  : float
    function min_int  : integer
    function mixfix [->] (_:'a -> 'b) (_:'a) (_:'b) : 'a -> 'b
    function mixfix [.._] (_:'a seq) (_:integer) : 'a seq
    function mixfix [_..] (_:'a seq) (_:integer) : 'a seq
    function mixfix [_.._] (_:'a seq) (_:integer) (_:integer) : 'a seq
    function mixfix [_] (_:'a seq) (_:integer) : 'a
    function mixfix {}  : 'a set
    function mod (_:integer) (_:integer) : integer
    function nan  : float
    function neg_infinity  : float
    function pow (_:integer) (_:integer) : integer
    function pred (_:integer) : integer
    function prefix ! (_:'a ref) : 'a
    function prefix - (_:integer) : integer
    function shift_left (_:integer) (_:integer) : integer
    function shift_right (_:integer) (_:integer) : integer
    function shift_right_trunc (_:integer) (_:integer) : integer
    function snd (_:'a * 'b) : 'b
    function stderr  : out_channel
    function stdin  : in_channel
    function stdout  : out_channel
    function succ (_:integer) : integer
    
  Field Symbols
    function contents (_:'a ref_1) : 'a
    
  Exception Symbols
    Assert_failure
    Division_by_zero
    End_of_file
    Exit
    Failure
    Invalid_argument
    Match_failure
    Not_found
    Out_of_memory
    Stack_overflow
    Sys_blocked_io
    Sys_error
    Undefined_recursive_module
    
  Namespaces
    Namespace: Array
      Type symbols
        ('a) t_2 [='a array]
        
      Logic Symbols
        predicate _exists (_:'a -> bool) (_:'a array)
        predicate _exists2 (_:'a -> 'b -> bool) (_:'a array) (_:'b array)
        function append (_:'a array) (_:'a array) : 'a array
        function concat (_:'a array list) : 'a array
        function fold_left (_:'a -> 'b -> 'a) (_:'a) (_:'b array) : 'a
        function fold_right (_:'b -> 'a -> 'a) (_:'b array) (_:'a) : 'a
        predicate for_all (_:'a -> bool) (_:'a array)
        predicate for_all2 (_:'a -> 'b -> bool) (_:'a array) (_:'b array)
        function get (_:'a array) (_:integer) : 'a
        function init (_:integer) (_:integer -> 'a) : 'a array
        function length (_:'a array) : integer
        function make (_:integer) (_:'a) : 'a array
        function map (_:'a -> 'b) (_:'a array) : 'b array
        function map2 (_:'a -> 'b -> 'c_2) (_:'a array) (_:'b array) : 'c_2 
        array
        function mapi (_:integer -> 'a -> 'b) (_:'a array) : 'b array
        predicate mem (_:'a) (_:'a array)
        function of_list (_:'a list) : 'a array
        function of_seq (_:'a seq) : 'a array
        predicate permut (_:'a array) (_:'a array)
        predicate permut_sub (_:'a array) (_:'a array) (_:integer)
                             (_:integer)
        function sub (_:'a array) (_:integer) (_:integer) : 'a array
        function to_bag (_:'a array) : 'a bag
        function to_list (_:'a array) : 'a list
        function to_seq (_:'a array) : 'a seq
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Bag
      Type symbols
        ('a) t_3 [='a bag]
        
      Logic Symbols
        predicate _exists_1 (_:'a -> bool) (_:'a bag)
        function add (_:'a) (_:'a bag) : 'a bag
        function cardinal (_:'a bag) : integer
        function choose (_:'a bag) : 'a
        function choose_opt (_:'a bag) : 'a option
        function diff (_:'a bag) (_:'a bag) : 'a bag
        predicate disjoint (_:'a bag) (_:'a bag)
        function empty  : 'a bag
        function filter (_:'a -> bool) (_:'a bag) : 'a bag
        function filter_map (_:'a -> 'a option) (_:'a bag) : 'a bag
        function fold (_:'a -> 'b -> 'b) (_:'a bag) (_:'b) : 'b
        predicate for_all_1 (_:'a -> bool) (_:'a bag)
        function inter (_:'a bag) (_:'a bag) : 'a bag
        predicate is_empty (_:'a bag)
        function map_1 (_:'a -> 'b) (_:'a bag) : 'b bag
        predicate mem_1 (_:'a) (_:'a bag)
        function occurrences (_:'a) (_:'a bag) : integer
        function of_list_1 (_:'a list) : 'a bag
        function of_seq_1 (_:'a seq) : 'a bag
        function partition (_:'a -> bool) (_:'a bag) : 'a bag * 'a bag
        function remove (_:'a) (_:'a bag) : 'a bag
        function singleton (_:'a) : 'a bag
        predicate subset (_:'a bag) (_:'a bag)
        function sum (_:'a bag) (_:'a bag) : 'a bag
        function to_list_1 (_:'a bag) : 'a list
        function to_seq_1 (_:'a bag) : 'a seq
        function union (_:'a bag) (_:'a bag) : 'a bag
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Gospelstdlib
      Type symbols
        ('a) bag
        ('a) ref
        ('a) seq
        ('a) set
        
      Logic Symbols
        function abs (_:integer) : integer
        function fst (_:'a * 'b) : 'a
        function infix * (_:integer) (_:integer) : integer
        function infix + (_:integer) (_:integer) : integer
        function infix ++ (_:'a seq) (_:'a seq) : 'a seq
        function infix - (_:integer) (_:integer) : integer
        function infix / (_:integer) (_:integer) : integer
        predicate infix < (_:integer) (_:integer)
        predicate infix <= (_:integer) (_:integer)
        predicate infix > (_:integer) (_:integer)
        predicate infix >= (_:integer) (_:integer)
        function integer_of_int (_:int) : integer
        function logand (_:integer) (_:integer) : integer
        function lognot (_:integer) : integer
        function logor (_:integer) (_:integer) : integer
        function logxor (_:integer) (_:integer) : integer
        function max (_:integer) (_:integer) : integer
        function max_int  : integer
        function min (_:integer) (_:integer) : integer
        function min_int  : integer
        function mixfix [->] (_:'a -> 'b) (_:'a) (_:'b) : 'a -> 'b
        function mixfix [.._] (_:'a seq) (_:integer) : 'a seq
        function mixfix [_..] (_:'a seq) (_:integer) : 'a seq
        function mixfix [_.._] (_:'a seq) (_:integer) (_:integer) : 'a seq
        function mixfix [_] (_:'a seq) (_:integer) : 'a
        function mixfix {}  : 'a set
        function mod (_:integer) (_:integer) : integer
        function pow (_:integer) (_:integer) : integer
        function pred (_:integer) : integer
        function prefix ! (_:'a ref) : 'a
        function prefix - (_:integer) : integer
        function shift_left (_:integer) (_:integer) : integer
        function shift_right (_:integer) (_:integer) : integer
        function shift_right_trunc (_:integer) (_:integer) : integer
        function snd (_:'a * 'b) : 'b
        function succ (_:integer) : integer
        
      Field Symbols
        
      Exception Symbols
        Failure
        Invalid_argument
        Not_found
        
      Namespaces
        Namespace: Array
          Type symbols
            ('a) t_2 [='a array]
            
          Logic Symbols
            predicate _exists (_:'a -> bool) (_:'a array)
            predicate _exists2 (_:'a -> 'b -> bool) (_:'a array) (_:'b array)
            function append (_:'a array) (_:'a array) : 'a array
            function concat (_:'a array list) : 'a array
            function fold_left (_:'a -> 'b -> 'a) (_:'a) (_:'b array) : 'a
            function fold_right (_:'b -> 'a -> 'a) (_:'b array) (_:'a) : 'a
            predicate for_all (_:'a -> bool) (_:'a array)
            predicate for_all2 (_:'a -> 'b -> bool) (_:'a array) (_:'b array)
            function get (_:'a array) (_:integer) : 'a
            function init (_:integer) (_:integer -> 'a) : 'a array
            function length (_:'a array) : integer
            function make (_:integer) (_:'a) : 'a array
            function map (_:'a -> 'b) (_:'a array) : 'b array
            function map2 (_:'a -> 'b -> 'c_2) (_:'a array) (_:'b array) : 'c_2 
            array
            function mapi (_:integer -> 'a -> 'b) (_:'a array) : 'b array
            predicate mem (_:'a) (_:'a array)
            function of_list (_:'a list) : 'a array
            function of_seq (_:'a seq) : 'a array
            predicate permut (_:'a array) (_:'a array)
            predicate permut_sub (_:'a array) (_:'a array) (_:integer)
                                 (_:integer)
            function sub (_:'a array) (_:integer) (_:integer) : 'a array
            function to_bag (_:'a array) : 'a bag
            function to_list (_:'a array) : 'a list
            function to_seq (_:'a array) : 'a seq
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: Bag
          Type symbols
            ('a) t_3 [='a bag]
            
          Logic Symbols
            predicate _exists_1 (_:'a -> bool) (_:'a bag)
            function add (_:'a) (_:'a bag) : 'a bag
            function cardinal (_:'a bag) : integer
            function choose (_:'a bag) : 'a
            function choose_opt (_:'a bag) : 'a option
            function diff (_:'a bag) (_:'a bag) : 'a bag
            predicate disjoint (_:'a bag) (_:'a bag)
            function empty  : 'a bag
            function filter (_:'a -> bool) (_:'a bag) : 'a bag
            function filter_map (_:'a -> 'a option) (_:'a bag) : 'a bag
            function fold (_:'a -> 'b -> 'b) (_:'a bag) (_:'b) : 'b
            predicate for_all_1 (_:'a -> bool) (_:'a bag)
            function inter (_:'a bag) (_:'a bag) : 'a bag
            predicate is_empty (_:'a bag)
            function map_1 (_:'a -> 'b) (_:'a bag) : 'b bag
            predicate mem_1 (_:'a) (_:'a bag)
            function occurrences (_:'a) (_:'a bag) : integer
            function of_list_1 (_:'a list) : 'a bag
            function of_seq_1 (_:'a seq) : 'a bag
            function partition (_:'a -> bool) (_:'a bag) : 'a bag * 'a bag
            function remove (_:'a) (_:'a bag) : 'a bag
            function singleton (_:'a) : 'a bag
            predicate subset (_:'a bag) (_:'a bag)
            function sum (_:'a bag) (_:'a bag) : 'a bag
            function to_list_1 (_:'a bag) : 'a list
            function to_seq_1 (_:'a bag) : 'a seq
            function union (_:'a bag) (_:'a bag) : 'a bag
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: List
          Type symbols
            ('a) t_4 [='a list]
            
          Logic Symbols
            predicate _exists_2 (_:'a -> bool) (_:'a list)
            predicate _exists2_1 (_:'a -> 'b -> bool) (_:'a list) (_:'b list)
            function fold_left_1 (_:'a -> 'b -> 'a) (_:'a) (_:'b list) : 'a
            function fold_right_1 (_:'b -> 'a -> 'a) (_:'b list) (_:'a) : 'a
            predicate for_all_2 (_:'a -> bool) (_:'a list)
            predicate for_all2_1 (_:'a -> 'b -> bool) (_:'a list) (_:'b list)
            function hd (_:'a list) : 'a
            function init_1 (_:integer) (_:integer -> 'a) : 'a list
            function length_1 (_:'a list) : integer
            function map_2 (_:'a -> 'b) (_:'a list) : 'b list
            function map2_1 (_:'a -> 'b -> 'c_2) (_:'a list) (_:'b list) : 'c_2 
            list
            function mapi_1 (_:integer -> 'a -> 'b) (_:'a list) : 'b list
            predicate mem_2 (_:'a) (_:'a list)
            function nth (_:'a list) (_:integer) : 'a
            function nth_opt (_:'a list) (_:integer) : 'a option
            function of_seq_2 (_:'a seq) : 'a list
            function rev (_:'a list) : 'a list
            function tl (_:'a list) : 'a list
            function to_seq_2 (_:'a list) : 'a seq
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: Map
          Type symbols
            
          Logic Symbols
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: Order
          Type symbols
            
          Logic Symbols
            predicate is_pre_order (_:'a -> 'a -> int)
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: Seq
          Type symbols
            ('a) t_5 [='a seq]
            
          Logic Symbols
            function append_1 (_:'a seq) (_:'a seq) : 'a seq
            function cons (_:'a) (_:'a seq) : 'a seq
            function empty_1  : 'a seq
            function filter_1 (_:'a -> bool) (_:'a seq) : 'a seq
            function filter_map_1 (_:'a -> 'b option) (_:'a seq) : 'b seq
            function fold_left_2 (_:'a -> 'b -> 'a) (_:'a) (_:'b seq) : 'a
            function fold_right_2 (_:'a -> 'b -> 'b) (_:'a seq) (_:'b) : 'b
            function get_1 (_:'a seq) (_:integer) : 'a
            function hd_1 (_:'a seq) : 'a
            function init_2 (_:integer) (_:integer -> 'a) : 'a seq
            function length_2 (_:'a seq) : integer
            function map_3 (_:'a -> 'b) (_:'a seq) : 'b seq
            predicate mem_3 (_:'a seq) (_:'a)
            function rev_1 (_:'a seq) : 'a seq
            function set_1 (_:'a seq) (_:integer) (_:'a) : 'a seq
            function singleton_1 (_:'a) : 'a seq
            function snoc (_:'a seq) (_:'a) : 'a seq
            function tl_1 (_:'a seq) : 'a seq
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: Set
          Type symbols
            ('a) t_6 [='a set]
            
          Logic Symbols
            predicate _exists_3 (_:'a -> bool) (_:'a set)
            function add_1 (_:'a) (_:'a set) : 'a set
            function cardinal_1 (_:'a set) : integer
            function choose_1 (_:'a set) : integer
            function choose_opt_1  : 'a set -> 'a option
            function compare (_:'a set) (_:'a set) : integer
            function diff_1 (_:'a set) (_:'a set) : 'a set
            predicate disjoint_1 (_:'a set) (_:'a set)
            function empty_2  : 'a set
            function filter_2 (_:'a -> bool) (_:'a set) : 'a set
            function filter_map_2 (_:'a -> 'a option) (_:'a set) : 'a set
            function fold_1 (_:'a -> 'b -> 'b) (_:'a set) (_:'b) : 'b
            predicate for_all_3 (_:'a -> bool) (_:'a set)
            function inter_1 (_:'a set) (_:'a set) : 'a set
            predicate is_empty_1 (_:'a set)
            function map_4 (_:'a -> 'b) (_:'a set) : 'b set
            predicate mem_4 (_:'a) (_:'a set)
            function of_list_2 (_:'a list) : 'a set
            function of_seq_3 (_:'a seq) : 'a set
            function partition_1 (_:'a -> bool) (_:'a set) : 'a set * 'a set
            function remove_1 (_:'a) (_:'a set) : 'a set
            function singleton_2 (_:'a) : 'a set
            predicate subset_1 (_:'a set) (_:'a set)
            function to_list_2 (_:'a set) : 'a list
            function to_seq_3 (_:'a set) : 'a seq
            function union_1 (_:'a set) (_:'a set) : 'a set
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        Namespace: Sys
          Type symbols
            
          Logic Symbols
            function big_endian  : bool
            function int_size  : integer
            function max_array_length  : integer
            function max_string_length  : integer
            function word_size  : integer
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        
      Type Namespaces
        
    Namespace: LargeFile
      Type symbols
        
      Logic Symbols
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: List
      Type symbols
        ('a) t_4 [='a list]
        
      Logic Symbols
        predicate _exists_2 (_:'a -> bool) (_:'a list)
        predicate _exists2_1 (_:'a -> 'b -> bool) (_:'a list) (_:'b list)
        function fold_left_1 (_:'a -> 'b -> 'a) (_:'a) (_:'b list) : 'a
        function fold_right_1 (_:'b -> 'a -> 'a) (_:'b list) (_:'a) : 'a
        predicate for_all_2 (_:'a -> bool) (_:'a list)
        predicate for_all2_1 (_:'a -> 'b -> bool) (_:'a list) (_:'b list)
        function hd (_:'a list) : 'a
        function init_1 (_:integer) (_:integer -> 'a) : 'a list
        function length_1 (_:'a list) : integer
        function map_2 (_:'a -> 'b) (_:'a list) : 'b list
        function map2_1 (_:'a -> 'b -> 'c_2) (_:'a list) (_:'b list) : 'c_2 
        list
        function mapi_1 (_:integer -> 'a -> 'b) (_:'a list) : 'b list
        predicate mem_2 (_:'a) (_:'a list)
        function nth (_:'a list) (_:integer) : 'a
        function nth_opt (_:'a list) (_:integer) : 'a option
        function of_seq_2 (_:'a seq) : 'a list
        function rev (_:'a list) : 'a list
        function tl (_:'a list) : 'a list
        function to_seq_2 (_:'a list) : 'a seq
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Map
      Type symbols
        
      Logic Symbols
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Order
      Type symbols
        
      Logic Symbols
        predicate is_pre_order (_:'a -> 'a -> int)
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Seq
      Type symbols
        ('a) t_5 [='a seq]
        
      Logic Symbols
        function append_1 (_:'a seq) (_:'a seq) : 'a seq
        function cons (_:'a) (_:'a seq) : 'a seq
        function empty_1  : 'a seq
        function filter_1 (_:'a -> bool) (_:'a seq) : 'a seq
        function filter_map_1 (_:'a -> 'b option) (_:'a seq) : 'b seq
        function fold_left_2 (_:'a -> 'b -> 'a) (_:'a) (_:'b seq) : 'a
        function fold_right_2 (_:'a -> 'b -> 'b) (_:'a seq) (_:'b) : 'b
        function get_1 (_:'a seq) (_:integer) : 'a
        function hd_1 (_:'a seq) : 'a
        function init_2 (_:integer) (_:integer -> 'a) : 'a seq
        function length_2 (_:'a seq) : integer
        function map_3 (_:'a -> 'b) (_:'a seq) : 'b seq
        predicate mem_3 (_:'a seq) (_:'a)
        function rev_1 (_:'a seq) : 'a seq
        function set_1 (_:'a seq) (_:integer) (_:'a) : 'a seq
        function singleton_1 (_:'a) : 'a seq
        function snoc (_:'a seq) (_:'a) : 'a seq
        function tl_1 (_:'a seq) : 'a seq
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Set
      Type symbols
        ('a) t_6 [='a set]
        
      Logic Symbols
        predicate _exists_3 (_:'a -> bool) (_:'a set)
        function add_1 (_:'a) (_:'a set) : 'a set
        function cardinal_1 (_:'a set) : integer
        function choose_1 (_:'a set) : integer
        function choose_opt_1  : 'a set -> 'a option
        function compare (_:'a set) (_:'a set) : integer
        function diff_1 (_:'a set) (_:'a set) : 'a set
        predicate disjoint_1 (_:'a set) (_:'a set)
        function empty_2  : 'a set
        function filter_2 (_:'a -> bool) (_:'a set) : 'a set
        function filter_map_2 (_:'a -> 'a option) (_:'a set) : 'a set
        function fold_1 (_:'a -> 'b -> 'b) (_:'a set) (_:'b) : 'b
        predicate for_all_3 (_:'a -> bool) (_:'a set)
        function inter_1 (_:'a set) (_:'a set) : 'a set
        predicate is_empty_1 (_:'a set)
        function map_4 (_:'a -> 'b) (_:'a set) : 'b set
        predicate mem_4 (_:'a) (_:'a set)
        function of_list_2 (_:'a list) : 'a set
        function of_seq_3 (_:'a seq) : 'a set
        function partition_1 (_:'a -> bool) (_:'a set) : 'a set * 'a set
        function remove_1 (_:'a) (_:'a set) : 'a set
        function singleton_2 (_:'a) : 'a set
        predicate subset_1 (_:'a set) (_:'a set)
        function to_list_2 (_:'a set) : 'a list
        function to_seq_3 (_:'a set) : 'a seq
        function union_1 (_:'a set) (_:'a set) : 'a set
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    Namespace: Stdlib
      Type symbols
        ('a, 'b, 'c_2) format [=('a, 'b, 'c_2, 'c_2, 'c_2, 'c_2) format6]
        ('a, 'b, 'c_2, 'd) format4 [=('a, 'b, 'c_2, 'c_2, 'c_2, 'd) format6]
        ('a, 'b, 'c_2, 'd, 'e, 'f) format6_1 [=('a, 'b, 'c_2, 'd, 'e, 'f) 
        format6]
         fpclass
         in_channel
         open_flag
         out_channel
        ('a) ref_1
        ('a, 'b) result
        
      Logic Symbols
        function Error (_:'b) : ('a, 'b) result
        function FP_infinite  : fpclass
        function FP_nan  : fpclass
        function FP_normal  : fpclass
        function FP_subnormal  : fpclass
        function FP_zero  : fpclass
        function Ok (_:'a) : ('a, 'b) result
        function Open_append  : open_flag
        function Open_binary  : open_flag
        function Open_creat  : open_flag
        function Open_excl  : open_flag
        function Open_nonblock  : open_flag
        function Open_rdonly  : open_flag
        function Open_text  : open_flag
        function Open_trunc  : open_flag
        function Open_wronly  : open_flag
        function __FILE__  : string
        function __FUNCTION__  : string
        function __LINE__  : int
        function __LOC__  : string
        function __MODULE__  : string
        function __POS__  : string * int * int * int
        function constr#ref (_:'a) : 'a ref_1
        function epsilon_float  : float
        function infinity  : float
        function max_float  : float
        function max_int_1  : int
        function min_float  : float
        function min_int_1  : int
        function nan  : float
        function neg_infinity  : float
        function stderr  : out_channel
        function stdin  : in_channel
        function stdout  : out_channel
        
      Field Symbols
        function contents (_:'a ref_1) : 'a
        
      Exception Symbols
        Assert_failure
        Division_by_zero
        End_of_file
        Exit
        Failure_1
        Invalid_argument_1
        Match_failure
        Not_found_1
        Out_of_memory
        Stack_overflow
        Sys_blocked_io
        Sys_error
        Undefined_recursive_module
        
      Namespaces
        Namespace: LargeFile
          Type symbols
            
          Logic Symbols
            
          Field Symbols
            
          Exception Symbols
            
          Namespaces
            
          Type Namespaces
            
        
      Type Namespaces
        
    Namespace: Sys
      Type symbols
        
      Logic Symbols
        function big_endian  : bool
        function int_size  : integer
        function max_array_length  : integer
        function max_string_length  : integer
        function word_size  : integer
        
      Field Symbols
        
      Exception Symbols
        
      Namespaces
        
      Type Namespaces
        
    
  translations:
((Value
  ((name silly_create) (loc <opaque>)
   (arguments
    (((name c_1) (label <opaque>)
      (type_
       ((name int) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
        (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
        (copy <opaque>)))
      (modified false) (consumed false))))
   (returns
    (((name t_1) (label <opaque>)
      (type_
       ((name int) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
        (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
        (copy <opaque>)))
      (modified false) (consumed false))))
   (register_name __error__002_) (ghost Nonghost) (pure false) (checks ())
   (preconditions
    (((txt  "((integer_of_int \
           \nc_1:int):integer < 5:integer):prop")
      (loc <opaque>)
      (translation
        "if\
       \n  not\
       \n    (try\
       \n       Ortac_runtime.Z.lt (Ortac_runtime.Z.of_int c_1)\
       \n         (Ortac_runtime.Z.of_int 5)\
       \n     with\
       \n     | e ->\
       \n         ((Ortac_runtime.Specification_failure\
       \n             {\
       \n               term = \"((integer_of_int \\nc_1:int):integer < 5:integer):prop\";\
       \n               term_kind = Pre;\
       \n               exn = e\
       \n             })\
       \n            |> (Ortac_runtime.Errors.register __error__002_);\
       \n          true))\
       \nthen\
       \n  (Ortac_runtime.Violated_invariant\
       \n     {\
       \n       term = \"((integer_of_int \\nc_1:int):integer < 5:integer):prop\";\
       \n       position = Pre\
       \n     })\
       \n    |> (Ortac_runtime.Errors.register __error__002_)"))))
   (postconditions ()) (xpostconditions ())))
 (Value
  ((name silly_create) (loc <opaque>)
   (arguments
    (((name c) (label <opaque>)
      (type_
       ((name int) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
        (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
        (copy <opaque>)))
      (modified false) (consumed false))))
   (returns
    (((name t) (label <opaque>)
      (type_
       ((name int) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
        (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
        (copy <opaque>)))
      (modified false) (consumed false))))
   (register_name __error__001_) (ghost Nonghost) (pure false) (checks ())
   (preconditions
    (((txt  "((integer_of_int \
           \nc:int):integer >= 5:integer):prop")
      (loc <opaque>)
      (translation
        "if\
       \n  not\
       \n    (try\
       \n       Ortac_runtime.Z.geq (Ortac_runtime.Z.of_int c)\
       \n         (Ortac_runtime.Z.of_int 5)\
       \n     with\
       \n     | e ->\
       \n         ((Ortac_runtime.Specification_failure\
       \n             {\
       \n               term = \"((integer_of_int \\nc:int):integer >= 5:integer):prop\";\
       \n               term_kind = Pre;\
       \n               exn = e\
       \n             })\
       \n            |> (Ortac_runtime.Errors.register __error__001_);\
       \n          true))\
       \nthen\
       \n  (Ortac_runtime.Violated_invariant\
       \n     {\
       \n       term = \"((integer_of_int \\nc:int):integer >= 5:integer):prop\";\
       \n       position = Pre\
       \n     })\
       \n    |> (Ortac_runtime.Errors.register __error__001_)"))))
   (postconditions ()) (xpostconditions ())))
 (Type
  ((name oooo) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
   (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
   (copy <opaque>))))
end of translations.
types:
tsymbol:
((ts_ident ((id_str unit) (id_attrs ()) (id_loc <opaque>) (id_tag 7)))
 (ts_args ()) (ts_alias ()))
type:
((name unit) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost) (models ())
 (invariants ()) (equality <opaque>) (comparison <opaque>) (copy <opaque>))
tsymbol:
((ts_ident ((id_str integer) (id_attrs ()) (id_loc <opaque>) (id_tag 8)))
 (ts_args ()) (ts_alias ()))
type:
((name integer) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str int) (id_attrs ()) (id_loc <opaque>) (id_tag 9)))
 (ts_args ()) (ts_alias ()))
type:
((name int) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost) (models ())
 (invariants ()) (equality <opaque>) (comparison <opaque>) (copy <opaque>))
tsymbol:
((ts_ident ((id_str char) (id_attrs ()) (id_loc <opaque>) (id_tag 10)))
 (ts_args ()) (ts_alias ()))
type:
((name char) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost) (models ())
 (invariants ()) (equality <opaque>) (comparison <opaque>) (copy <opaque>))
tsymbol:
((ts_ident ((id_str string) (id_attrs ()) (id_loc <opaque>) (id_tag 12)))
 (ts_args ()) (ts_alias ()))
type:
((name string) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str float) (id_attrs ()) (id_loc <opaque>) (id_tag 13)))
 (ts_args ()) (ts_alias ()))
type:
((name float) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str bool) (id_attrs ()) (id_loc <opaque>) (id_tag 14)))
 (ts_args ()) (ts_alias ()))
type:
((name bool) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost) (models ())
 (invariants ()) (equality <opaque>) (comparison <opaque>) (copy <opaque>))
tsymbol:
((ts_ident ((id_str array) (id_attrs ()) (id_loc <opaque>) (id_tag 17)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 16))))))
 (ts_alias ()))
type:
((name array) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str list) (id_attrs ()) (id_loc <opaque>) (id_tag 19)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 18))))))
 (ts_alias ()))
type:
((name list) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str option) (id_attrs ()) (id_loc <opaque>) (id_tag 21)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 20))))))
 (ts_alias ()))
type:
((name option) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str seq) (id_attrs ()) (id_loc <opaque>) (id_tag 814)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 46))))))
 (ts_alias ()))
type:
((name seq) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str bag) (id_attrs ()) (id_loc <opaque>) (id_tag 815)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 46))))))
 (ts_alias ()))
type:
((name bag) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str ref) (id_attrs ()) (id_loc <opaque>) (id_tag 816)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 46))))))
 (ts_alias ()))
type:
((name ref) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str set) (id_attrs ()) (id_loc <opaque>) (id_tag 817)))
 (ts_args
  (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 46))))))
 (ts_alias ()))
type:
((name set) (loc <opaque>) (mutable_ (Dependant <fun>)) (ghost Nonghost)
 (models ()) (invariants ()) (equality <opaque>) (comparison <opaque>)
 (copy <opaque>))
tsymbol:
((ts_ident ((id_str oooo) (id_attrs ()) (id_loc <opaque>) (id_tag 1423)))
 (ts_args ())
 (ts_alias
  (((ty_node
     (Tyapp
      ((ts_ident ((id_str list) (id_attrs ()) (id_loc <opaque>) (id_tag 19)))
       (ts_args
        (((tv_name ((id_str a) (id_attrs ()) (id_loc <opaque>) (id_tag 18))))))
       (ts_alias ()))
      (((ty_node
         (Tyapp
          ((ts_ident
            ((id_str int) (id_attrs ()) (id_loc <opaque>) (id_tag 9)))
           (ts_args ()) (ts_alias ()))
          ()))))))))))
type:
((name oooo) (loc <opaque>) (mutable_ Immutable) (ghost Nonghost) (models ())
 (invariants ()) (equality <opaque>) (comparison <opaque>) (copy <opaque>))include Example
module Ortac_runtime = Ortac_runtime
let silly_create c =
  let __error__001_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "example.mli";
            pos_lnum = 3;
            pos_bol = 22;
            pos_cnum = 22
          };
        Ortac_runtime.stop =
          {
            pos_fname = "example.mli";
            pos_lnum = 6;
            pos_bol = 140;
            pos_cnum = 142
          }
      } "silly_create" in
  if
    not
      (try
         Ortac_runtime.Z.geq (Ortac_runtime.Z.of_int c)
           (Ortac_runtime.Z.of_int 5)
       with
       | e ->
           ((Ortac_runtime.Specification_failure
               {
                 term =
                   "((integer_of_int \nc:int):integer >= 5:integer):prop";
                 term_kind = Pre;
                 exn = e
               })
              |> (Ortac_runtime.Errors.register __error__001_);
            true))
  then
    (Ortac_runtime.Violated_invariant
       {
         term = "((integer_of_int \nc:int):integer >= 5:integer):prop";
         position = Pre
       })
      |> (Ortac_runtime.Errors.register __error__001_);
  Ortac_runtime.Errors.report __error__001_;
  (let t =
     try silly_create c
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__001_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__001_);
          Ortac_runtime.Errors.report __error__001_;
          raise e) in
   Ortac_runtime.Errors.report __error__001_; t)
let silly_create c_1 =
  let __error__002_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "example.mli";
            pos_lnum = 8;
            pos_bol = 144;
            pos_cnum = 144
          };
        Ortac_runtime.stop =
          {
            pos_fname = "example.mli";
            pos_lnum = 11;
            pos_bol = 262;
            pos_cnum = 264
          }
      } "silly_create" in
  if
    not
      (try
         Ortac_runtime.Z.lt (Ortac_runtime.Z.of_int c_1)
           (Ortac_runtime.Z.of_int 5)
       with
       | e ->
           ((Ortac_runtime.Specification_failure
               {
                 term =
                   "((integer_of_int \nc_1:int):integer < 5:integer):prop";
                 term_kind = Pre;
                 exn = e
               })
              |> (Ortac_runtime.Errors.register __error__002_);
            true))
  then
    (Ortac_runtime.Violated_invariant
       {
         term = "((integer_of_int \nc_1:int):integer < 5:integer):prop";
         position = Pre
       })
      |> (Ortac_runtime.Errors.register __error__002_);
  Ortac_runtime.Errors.report __error__002_;
  (let t_1 =
     try silly_create c_1
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__002_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__002_);
          Ortac_runtime.Errors.report __error__002_;
          raise e) in
   Ortac_runtime.Errors.report __error__002_; t_1)
Type Namespaces
    