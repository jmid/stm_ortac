
*******************************
********** Parsed file ********
*******************************
type t =
  | O 
  | S of t 
val succ : t -> t[@@gospel {| y = succ x
    ensures y = S x |}]
val test1 : t -> t -> t[@@gospel
                         {| r = test1 x y
    requires x <> O && y = O
    ensures  match x, y with
             | _, S _ -> false
             | O, _   -> false
             | S a, O -> r = S (S a) |}]
val f_unit : int array -> unit[@@gospel
                                {| x1 = f_unit a
     modifies a
     ensures match x1 with () -> true |}]
[@@@gospel
  {| function fun_unit (x: unit): string =
    match x with
    | () -> "out" |}]
type t0 =
  | B of int * int 
[@@@gospel {| function f (x: t0) : unit =
    match x with B _ -> () |}]
type t1 =
  | A1 
  | A2 
  | B of t1 
[@@@gospel
  {| function f (x: t1): integer =
    match x with
    | A1
    | A2 -> 0
    | B A1
    | B A2 -> 0
    | B (B A1)
    | B (B A2) -> 0
    | B (B (B A1))
    | B x -> 0 |}]
type t2 =
  | E 
  | I of int 
val f2 : t2 -> int[@@gospel
                    {| r = f2 i
    ensures match i with
      | E    -> true
      | I 1i -> true
      | I 2i -> true
      | I 6i -> true
      | _    -> true |}]
[@@@gospel {| type t_integer = N of integer |}]
[@@@gospel
  {| function f3 (x : t_integer) : integer =
      match x with
      | N 0
      | N 1
      | N x -> 0 |}]
type t4 =
  | A of string 
  | B 
[@@@gospel
  {| function f4 (x: t4): integer =
      match x with
      | B
      | A "1" -> 0
      | A "333"
      | A _ -> 0 |}]
val f5 : bool -> int[@@gospel
                      {| r = f5 x
    ensures match x with
      | false -> r <> 1
      | true -> true
    ensures match true with _ -> true
    ensures match true with x -> true
|}]
type t6 =
  | A 
  | B of t6 * float 
val f6 : t6 -> int[@@gospel
                    {| r = f6 x
    ensures match x with
    | A -> false
    | B (B _, _) -> true
    | B (A, z) -> false |}]
type 'a t7 = ('a * int)
val f7 : char t7 -> int[@@gospel
                         {| r = f7 a
    ensures match a with
      | '\000', 0i
      | 'z', 0i -> false
      | _ -> true
|}]
val f8 : 'a option -> int[@@gospel
                           {| r = f8 o
    ensures match o with
    | None -> r = 2
    | Some x -> r <> 2 |}]
val f9 : char -> int[@@gospel
                      {| r = f9 a
    ensures
      match a with
      | '\000' .. '\031'
      | '\127' .. '\255' -> false
      | ' '    .. '~'    -> false

    ensures
      match a with
      | '\000'..'a' -> false
      | 'b'..'\255' -> true
|}]
val f10 : bool -> int[@@gospel
                       {| r = f10 x
    ensures
      match x with
      | true -> r <> 1
      | false -> true
    ensures
      match true with
      | _ -> true
    ensures
      match true with
      | x -> true
|}]
type t11 =
  | A of (int * int) 
  | B of int * int 
[@@@gospel
  {| function f11 (x: t11): integer =
    match x with
    | A _ -> 0
    | B _ -> 0 |}]
type t12 =
  | P of char * t12 
[@@@gospel
  {| function f (a : t12) : bool =
      match a with
      | P ('\000'..'b', _) -> true
      | P ('b'..'\255', x) -> false
|}]
type t13 = {
  n: int ;
  s: string }
[@@@gospel
  {| function f13 (x: t13): integer =
    match x with
    | { n=0i; s="beta"|"omega" } -> 0
    | { n=m } -> 0 |}]
[@@@gospel
  {| function f13' (x: t13): integer =
    match x with
    | { s="beta"|"omega" ; n=0i } -> 0
    | { n=m ; s = y } -> 0 |}]
val f14 : 'a list -> int[@@gospel
                          {| r = f14 l
    requires match l with
      | [] -> true
      | x::y::_ -> false
      | x::_ -> false
    requires match l with
      | [] -> true
      | x::(y::_ as ll) -> false
      | x::_ -> false
    requires match Some l with
      | None -> false
      | Some [] -> true
      | Some (x :: _ as a) -> false
|}]
type t15 =
  | A 
  | B 
val f15 : (t15 * t15 * t15 * t15) -> int[@@gospel
                                          {| r = f15 x
    requires match x with
     | A,A,A,A
     | B,B,B,B
     | _,A,A,A
     | _,B,B,B
     | _,_,A,A
     | _,_,B,B
     | _,_,_,A
     | _,_,_,B -> true
|}]
type t16 =
  | A 
  | B of t16 
  | C of t16 * t16 
val f16 : t16 -> int[@@gospel
                      {| r = f16 x
  requires match x with
           | A when true  -> true
           | B y when y=A -> true
           | B y when false -> true && y=A
           | C (y,z) when y=A && z=A -> true
           | C (y,z) when (y=A -> z=A) -> true
           | C (y,z) when (match y with A -> true | _ -> false) -> true
           | _ -> true
|}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Stdlib *)

(*@ open Gospelstdlib *)

type t =
| O 
| S of t 
  

val succ : t -> t
(*@ y = succ x
    ensures ...
     *)

val test1 : t -> t -> t
(*@ r = test1 x y
    requires ...
    ensures ...
     *)

val f_unit : int array -> unit
(*@ x1 = f_unit a
    ensures ...
    modifies ...
     *)

(*@ function fun_unit ... *)

type t0 =
| B of int * int 
  

(*@ function f ... *)

type t1 =
| A1 
| A2 
| B of t1 
  

(*@ function f ... *)

type t2 =
| E 
| I of int 
  

val f2 : t2 -> int
(*@ r = f2 i
    ensures ...
     *)

(*@ type t_integer =
    | N of integer 
   *)

(*@ function f3 ... *)

type t4 =
| A of string 
| B 
  

(*@ function f4 ... *)

val f5 : bool -> int
(*@ r = f5 x
    ensures ...
    ensures ...
    ensures ...
     *)

type t6 =
| A 
| B of t6 * float 
  

val f6 : t6 -> int
(*@ r = f6 x
    ensures ...
     *)

type 'a t7 = ('a * int)
  

val f7 : char t7 -> int
(*@ r = f7 a
    ensures ...
     *)

val f8 : 'a option -> int
(*@ r = f8 o
    ensures ...
     *)

val f9 : char -> int
(*@ r = f9 a
    ensures ...
    ensures ...
     *)

val f10 : bool -> int
(*@ r = f10 x
    ensures ...
    ensures ...
    ensures ...
     *)

type t11 =
| A of (int * int) 
| B of int * int 
  

(*@ function f11 ... *)

type t12 =
| P of char * t12 
  

(*@ function f ... *)

type t13 = {
n: int ;
s: string }
  

(*@ function f13 ... *)

(*@ function f13' ... *)

val f14 : 'a list -> int
(*@ r = f14 l
    requires ...
    requires ...
    requires ...
     *)

type t15 =
| A 
| B 
  

val f15 : (t15 * t15 * t15 * t15) -> int
(*@ r = f15 x
    requires ...
     *)

type t16 =
| A 
| B of t16 
| C of t16 * t16 
  

val f16 : t16 -> int
(*@ r = f16 x
    requires ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module positive-patterns.mli

  Namespace: positive-patterns.mli
    Type symbols
       t
       t0
       t1
       t11
       t12
       t13
       t15
       t16
       t2
       t4
       t6
      ('a) t7 [='a * int]
       t_integer
      
    Logic Symbols
      function A  : t16
      function A1  : t1
      function A2  : t1
      function B (_:t16) : t16
      function C (_:t16) (_:t16) : t16
      function E  : t2
      function I (_:int) : t2
      function N (_:integer) : t_integer
      function O  : t
      function P (_:char) (_:t12) : t12
      function S (_:t) : t
      function constr#t13 (_:int) (_:string) : t13
      function f (_:t12) : bool
      function f11 (_:t11) : integer
      function f13 (_:t13) : integer
      function f13' (_:t13) : integer
      function f3 (_:t_integer) : integer
      function f4 (_:t4) : integer
      function fun_unit (_:unit) : string
      
    Field Symbols
      function n (_:t13) : int
      function s (_:t13) : string
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Stdlib *)
    
    (*@ open Gospelstdlib *)
    
    type t = O of 
             function O  : t
             | S of t
               function S (_:t) : t
         
    
    val succ : t -> t
    (*@ y:t = succ x:t
        ensures (y:t = (S  x:t):t):prop*)
    
    val test1 : t -> t -> t
    (*@ r:t = test1 x_1:t y_1:t
        requires not (x_1:t = (O ):t):prop && (y_1:t = (O ):t):prop
        ensures (match (tuple2 
                x_1:t y_1:t):t * t with
                | _, S _ -> (False ):bool
                | O, _ -> (False ):bool
                | S a_1:t, O -> if (r:t = (S 
                                (S  a_1:t):t):t):prop then (True ):bool else (False ):
                                bool
                end::bool = (True ):bool):prop*)
    
    val f_unit : int array -> unit
    (*@ x1:unit = f_unit a_2:int array
        ensures (match x1:unit with
                |  -> (True ):bool
                end::bool = (True ):bool):prop
        writes a_2:int array*)
    
    (*@ function fun_unit (x_2:unit): string =
        match x_2:unit with
        |  -> "out":string
        end::string
    *)
    
    type t0 = B_1 of int * int
              function B_1 (_:int) (_:int) : t0
         
    
    (*@ function f_1 (x_3:t0): unit =
        match x_3:t0 with
        | B_1 (_, _) -> (unit_1 ):unit
        end::unit
    *)
    
    type t1 = A1 of 
              function A1  : t1
              | A2 of 
                function A2  : t1
              | B_2 of t1
                function B_2 (_:t1) : t1
         
    
    (*@ function f_2 (x_4:t1): integer =
        match x_4:t1 with
        | A1 | A2 -> 0:integer
        | B_2 A1 | B_2 A2 -> 0:integer
        | B_2 B_2 A1 | B_2 B_2 A2 -> 0:integer
        | B_2 B_2 B_2 A1 | B_2 x_5:t1 -> 0:integer
        end::integer
    *)
    
    type t2 = E of 
              function E  : t2
              | I of int
                function I (_:int) : t2
         
    
    val f2 : t2 -> int
    (*@ r_1:int = f2 i:t2
        ensures (match i:t2 with
                | E -> (True ):bool
                | I 1i -> (True ):bool
                | I 2i -> (True ):bool
                | I 6i -> (True ):bool
                | _ -> (True ):bool
                end::bool = (True ):bool):prop*)
    
    (*@ type t_integer = N of integer
                         function N (_:integer) : t_integer
              *)
    
    (*@ function f3 (x_6:t_integer): integer =
        match x_6:t_integer with
        | N 0 | N 1 | N x_7:integer -> 0:integer
        end::integer
    *)
    
    type t4 = A_1 of string
              function A_1 (_:string) : t4
              | B_3 of 
                function B_3  : t4
         
    
    (*@ function f4 (x_8:t4): integer =
        match x_8:t4 with
        | B_3 | A_1 "1" -> 0:integer
        | A_1 "333" | A_1 _ -> 0:integer
        end::integer
    *)
    
    val f5 : bool -> int
    (*@ r_2:int = f5 x_9:bool
        ensures (match x_9:bool with
                | False -> if not ((integer_of_int 
                           r_2:int):integer = 1:integer):prop then (True ):
                           bool else (False ):bool
                | True -> (True ):bool
                end::bool = (True ):bool):prop
                ensures (match (True ):bool with
                        | _ -> (True ):bool
                        end::bool = (True ):bool):prop
                ensures (match (True ):bool with
                        | x_10:bool -> (True ):bool
                        end::bool = (True ):bool):prop*)
    
    type t6 = A_2 of 
              function A_2  : t6
              | B_4 of t6 * float
                function B_4 (_:t6) (_:float) : t6
         
    
    val f6 : t6 -> int
    (*@ r_3:int = f6 x_11:t6
        ensures (match x_11:t6 with
                | A_2 -> (False ):bool
                | B_4 (B_4 (_, _), _) -> (True ):bool
                | B_4 (A_2, z:float) -> (False ):bool
                end::bool = (True ):bool):prop*)
    
    type 'a t7 = 'a * int
         
    
    val f7 : char t7 -> int
    (*@ r_4:int = f7 a_3:char * int
        ensures (match a_3:char * int with
                | '\000', 0i | 'z', 0i -> (False ):bool
                | _ -> (True ):bool
                end::bool = (True ):bool):prop*)
    
    val f8 : 'a option -> int
    (*@ r_5:int = f8 o:'a option
        ensures (match o:'a option with
                | None -> if ((integer_of_int 
                          r_5:int):integer = 2:integer):prop then (True ):
                          bool else (False ):bool
                | Some x_12:'a -> if not ((integer_of_int 
                                  r_5:int):integer = 2:integer):prop then (True ):
                                  bool else (False ):bool
                end::bool = (True ):bool):prop*)
    
    val f9 : char -> int
    (*@ r_6:int = f9 a_4:char
        ensures (match a_4:char with
                | '\000'..'\031' | '\127'..'\255' -> (False ):bool
                | ' '..'~' -> (False ):bool
                end::bool = (True ):bool):prop
                ensures (match a_4:char with
                        | '\000'..'a' -> (False ):bool
                        | 'b'..'\255' -> (True ):bool
                        end::bool = (True ):bool):prop*)
    
    val f10 : bool -> int
    (*@ r_7:int = f10 x_13:bool
        ensures (match x_13:bool with
                | True -> if not ((integer_of_int 
                          r_7:int):integer = 1:integer):prop then (True ):
                          bool else (False ):bool
                | False -> (True ):bool
                end::bool = (True ):bool):prop
                ensures (match (True ):bool with
                        | _ -> (True ):bool
                        end::bool = (True ):bool):prop
                ensures (match (True ):bool with
                        | x_14:bool -> (True ):bool
                        end::bool = (True ):bool):prop*)
    
    type t11 = A_3 of int * int
               function A_3 (_:int * int) : t11
               | B_5 of int * int
                 function B_5 (_:int) (_:int) : t11
         
    
    (*@ function f11 (x_15:t11): integer =
        match x_15:t11 with
        | A_3 _ -> 0:integer
        | B_5 (_, _) -> 0:integer
        end::integer
    *)
    
    type t12 = P of char * t12
               function P (_:char) (_:t12) : t12
         
    
    (*@ function f (a_5:t12): bool =
        match a_5:t12 with
        | P ('\000'..'b', _) -> (True ):bool
        | P ('b'..'\255', x_16:t12) -> (False ):bool
        end::bool
    *)
    
    type t13 = {n:int; s:string}
            function constr#t13 (_:int) (_:string) : t13
            function n (_:t13) : int
            function s (_:t13) : string
         
    
    (*@ function f13 (x_17:t13): integer =
        match x_17:t13 with
        | constr#t13 (0i, ("beta" | "omega")) -> 0:integer
        | constr#t13 (m:int, _) -> 0:integer
        end::integer
    *)
    
    (*@ function f13' (x_18:t13): integer =
        match x_18:t13 with
        | constr#t13 (0i, ("beta" | "omega")) -> 0:integer
        | constr#t13 (m_1:int, y_2:string) -> 0:integer
        end::integer
    *)
    
    val f14 : 'a list -> int
    (*@ r_8:int = f14 l:'a list
        requires (match l:'a list with
                 | [] -> (True ):bool
                 | infix :: (x_19:'a, infix :: (y_3:'a, _)) -> (False ):bool
                 | infix :: (x_20:'a, _) -> (False ):bool
                 end::bool = (True ):bool):prop
                 requires (match l:'a list with
                          | [] -> (True ):bool
                          | infix ::
                            (x_21:'a, (infix :: (y_4:'a, _) as ll:'a list)) -> 
                          (False ):bool
                          | infix :: (x_22:'a, _) -> (False ):bool
                          end::bool = (True ):bool):prop
                 requires (match (Some 
                          l:'a list):'a list option with
                          | None -> (False ):bool
                          | Some [] -> (True ):bool
                          | Some (infix :: (x_23:'a, _) as a_6:'a list) -> 
                          (False ):bool
                          end::bool = (True ):bool):prop*)
    
    type t15 = A_4 of 
               function A_4  : t15
               | B_6 of 
                 function B_6  : t15
         
    
    val f15 : (t15 * t15 * t15 * t15) -> int
    (*@ r_9:int = f15 x_24:t15 * t15 * t15 * t15
        requires (match x_24:t15 * t15 * t15 * t15 with
                 | A_4, A_4, A_4, A_4 | B_6, B_6, B_6, B_6 | _, A_4, A_4, A_4 | 
                   _, B_6, B_6, B_6 | _, _, A_4, A_4 | _, _, B_6, B_6 | 
                   _, _, _, A_4 | _, _, _, B_6 -> (True ):bool
                 end::bool = (True ):bool):prop*)
    
    type t16 = A of 
               function A  : t16
               | B of t16
                 function B (_:t16) : t16
               | C of t16 * t16
                 function C (_:t16) (_:t16) : t16
         
    
    val f16 : t16 -> int
    (*@ r_10:int = f16 x_25:t16
        requires (match x_25:t16 with
                 | A when true:prop -> (True ):bool
                 | B y_5:t16 when (y_5:t16 = (A ):t16):prop -> (True ):bool
                 | B y_6:t16 when false:prop -> if true:prop && (y_6:t16 = (A ):
                                                t16):prop then (True ):
                                                bool else (False ):bool
                 | C (y_7:t16, z_1:t16) when (y_7:t16 = (A ):t16):prop && (
                                             z_1:t16 = (A ):t16):prop -> 
                 (True ):bool
                 | C (y_8:t16, z_2:t16) when (y_8:t16 = (A ):t16):prop -> (
                                             z_2:t16 = (A ):t16):prop -> 
                 (True ):bool
                 | C (y_9:t16, z_3:t16) when (match y_9:t16 with
                                             | A -> (True ):bool
                                             | _ -> (False ):bool
                                             end::bool = (True ):bool):prop -> 
                 (True ):bool
                 | _ -> (True ):bool
                 end::bool = (True ):bool):prop*)

OK
